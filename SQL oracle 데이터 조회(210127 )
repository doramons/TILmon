# SQL Basic
# SQL Developer Oracle

#데이터베이스
	- 관계형 데이터 베이스(RDB)
    - 행(Row,Record,tuple)과 열(Column,Attribute)로 이루어진 2차원 표로 형식으로 Data를 관리하는 데이터베이스
#DBMS 처리흐름
 데이터 베이스 => DBMS => 클라이언트
 -데이터 베이스에 데이터들이 저장되어있고 우리는 클라이언트 프로그램을 통해 DBMS에 SQL문을 통해 데이터 삽입/ 삭제수정조회를 요청
 - DBMS가 클라이언트 요청 내용을 데이터베이스에 처리하여 그 결과를 다시 클라이언트에게 보냄(테이블 형태로 보냄)
#SQL(Structured Query Language)
	- 데이터베이스에 데이터를 질의, 등록, 수정, 삭제 등을 요청하기 위한 표준언어
		- DML(Data Manipulation Language) : table에 data 추가, 수정, 삭제, 조회
				- INSERT,UPDATE, DELETE, SELECT
		- DDL(Data Definition Language) : Database 스키마(database나 table등) 생성및 변경
				- CREATE, ALTER, DROP, TRUNCATE
		- DCL(Data Control Language) : 사용자에게 권한을 주거나 권한을 없애는 것과 같은 data 접근을 제어하기 위한 언어
				- GRANT, REVOKE
		- TCL(Transaction Control Language) :Transaction을 관리하는 언어 
				- COMMIT, ROLLBACK, SAVEPOINT
	
	#DDL
		- 사용자 계정 생성 및 권한 설정
			- 사용자 계정 생성 
				: CREATE USER 계정명 IDENTIFIED BY 암호 (다음에 계정 접근시 암호 입력해야함)
					(오라클 12c 이후 계정명을 만들때 C##을 붙여야함 ex. CREATE USER C##mong)
			- 계정 삭제
				: DROP USER 계정명 CASCADE
			- 권한 지정
				: GRANT 권한 TO 계정 (ex. GRANT ALL PRVILEGES TO C##mong; )
		- 테이블 생성
			: CREATE TABLE 테이블 이름(
				 컬럼이름 datatype 제약조건,
				 컬럼이름 datatype 제약조건,.....
				 )
		ex. CREATE TABLE DEPARTMENT(
					DEPARTMENT_ID NUMBER(4) CONSTRAINT dept_pk_deptno PRIMARY KEY,
					DEPARTMENT_NAME VARCHAR2(30),
					LOCATION VARCHAR2(100)
				)
				- 데이터 타입
					-CHAR 고정길이 문자열 (data 길이가 일정할때 주로 사용)
					-VARCHAR2 가변길이 문자열
					- NCHAR 고정길이 유니코드 문자열 (한글은 한 글자당 3바이트씩 차지하므로 한글 쓸떄 NCHAR, NVARCHAR2 사용하곤함)
					- NVARCHAR2 가변길이 유니코드 문자열
				
				- 제약조건
					- PRIMARY KEY(PK) :하나의 행을 대표하는 열  NOT NULL과 UNIQUE조건을 만족(ID와 같은 값에 많이 사용됨 필수적인 요소이며 중복되면 안됨)
					- FOREIGN KEY(PK) : 열과 참조하는 테이블의 열 사이의 연결관계를 설명
					- UNIQUE KEY(UK) : 테이블의 모든 행이 다른 값을 가져야하는 열 중복x
					- NOT NULL(NN) : NULL일 수 없는 열 반드시 값을 갖야함
			-테이블 삭제
				: DROP TABLE 테이블 이름 [CASCADE CONSTRAINT]
					(삭제하면 되돌릴 수 없다)
			-테이블의 컬럼이나 제약조건 수정
				-컬럼 추가
					: ALTER TABLE 테이블 이름 ADD (컬럼명 DATA_TYPE[제약조건])
				- 제약조건 추가
					: ALTER TABLE 테이블이름 ADD CONSTRAINT 제약조건구문
					ex. ALTER TABLE MEMBER ADD (address VARCHAR2(100))
				-컬럼타입 변경
					: ALTER TABLE 테이블 이름 MODIFY (변경할 컬럼 명 DATA_TYPE [제약조건])
					- 데이터가 존재하는 경우 변경할 수 있다 but VARCHAR2, CHAR의경우 변경하려는 크기가 더 크면 가능
				- 컬럼 삭제
					: ALTER TABLE 테이블 이름 DROP COLUMN 삭제할 커럼이름
					  ex. ALTER TABLE member DROP COLUMN address
				- 제약조건 삭제
					: ALTER TABE 테이블이름 DROP CONSTRAINT 삭제할제약조건이름
						 ex. ALTER TABLE member DROP CONSTRAINT PRIMARY KEY
			#DDL
				- INSERT (데이터 삽입)
					: INSERT INTO 테이블이름(컬럼명,컬럼명,....)VALUES(값1,값2,....)
					 ex. INSERT INTO member(MEMBER_ID,MEMBER_NAME,.....)
					 								VALUES(10535,'홍길동',...)
						-문자열의 경우 ''로 감싸준다
						- 모든 칼럼에 데이터를 넣을 경우 컬럼항목은 생략가능
						- 특정컬럼에 값을 안 넣을 경우 INSERT할 컬럼 대상에서 제외하거나 NULL 키워드를 값에 넣는다
				- UPDATE(데이터 갱신)
					: UPDATE 테이블이름
						SET 컬럼 = 변경할값, 컬럼 = 변경할값
						WHERE 제약조건
						EX. UPDATE EMPLOYEE
								SET SALARY = SALARY*1.1 
								WHERE EMPLOYEE_ID = 120
				 - DELETE(데이터 삭제)
				 		: DELETE FROM 테이블 이름 WHERE 제약조건;
						
						
				 -SELECT (조회)
				 		: SELECT 조회컬럼 "별칭",조회컬럼 "별칭",...
							FROM 테이블이름
							WHERE 제약조건
							GROUP BY 그룹화할 기준 컬럼
							HAVING 조건
							ORDER BY 정렬기준칼럼 ASC/DESC;
							
				- 사칙연산 및 문자열 합치기
						- 컬럼이나 값에서 사칙연산 이용가능
							- 연산자 
								- +,-,*,/ [모듈레이터는 MOD(a,b)함수를 이용하여 계산 MOD(a,b) = a%b]
								- 연산자 우선순위 지정은 ()로 묶는다
						ex. SELECT SALARY +20 FROM EMPLOYEE
						- SQL에서 문자열끼리 더할 때는 ||를 사용
							ex. SELECT member_name||'씨' FROM EMPLOYEE;
									=> 홍길동씨
									
					- WHERE 절에서 사용하는 검색조건의 주요 연산자
						- AND, OR (AND,OR이 동시에 올때는 AND가 우선함)
						- =, <>(!=), <,>, <=,>=
						- BETWEEN a AND b :a와b사이의 데이터를 조회(a,b포함)
						- IN (list) list의 값 중 어느 하나와 일치하는 데이터를 조회
						- LIKE 문자형태로 일치하는 데이터를 조회 (%,_사용)
						 ex. 사람으로 끝나는 데이터 
						 			select name from employee
									where name like (%사람);
								- 두번째 글자가 가 인 데이터 
								 	select column_name from table_name
									where column_name like (_가%);
									
						- IS NULL : NULL값을 가진 데이터 조회
						- NOT BETWEEN a and b : BETWEEN a AND b의 반대
						- NOT IN (list) : IN (list) 의 반대
						- NOT LIKE : LIKE의 반대
						- IS NOT NULL : IS NULL의 반대
					
			
